{"version":3,"sources":["components/TopBanner/index.js","components/SearchCol/index.js","components/EmployeeList/index.js","utils/api.js","App.js","serviceWorker.js","index.js"],"names":["TopBanner","Container","Navbar","expand","variant","bg","SearchCol","props","fluid","InputGroup","FormControl","placeholder","aria-label","aria-describedby","name","value","onChange","handleInputChange","Table","striped","bordered","hover","sort","onClick","handleSubmitClick","employees","length","map","person","index","key","src","picture","medium","first","last","cell","email","axios","get","App","useState","list","originalList","search","setEmployees","useEffect","api","then","response","data","results","console","log","e","target","newEmployees","filter","toLowerCase","includes","EmployeeList","sortOption","getAttribute","a","b","localeCompare","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uRAaeA,MAVf,WACI,OACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQC,OAAO,KAAKC,QAAQ,QAAQC,GAAG,SACnC,qD,gBCeDC,MAnBf,SAAmBC,GACf,OACI,6BACI,kBAACN,EAAA,EAAD,CAAWO,OAAK,GAChB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACAC,YAAY,gBACZC,aAAW,gBACXC,mBAAiB,eACjBC,KAAO,SACPC,MAASR,EAAMQ,MACfC,SAAYT,EAAMU,wB,QC2BnBX,MAtCf,SAAmBC,GACf,OACI,kBAACN,EAAA,EAAD,KACG,kBAACiB,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GACxB,+BACI,4BACA,qCACA,wBAAIC,KAAK,QAAQC,QAAShB,EAAMiB,mBAAhC,cACA,wBAAIF,KAAK,OAAOC,QAAShB,EAAMiB,mBAA/B,aACA,qCACA,uCAGJ,+BACKjB,EAAMkB,UAAUC,OAAS,EAAInB,EAAMkB,UAAUE,KAAI,SAACC,EAAQC,GACvD,OAAQ,wBAAIC,IAAKD,GACb,4BAAI,yBAAKE,IAAKH,EAAOI,QAAQC,UAC7B,4BAAI,8BAAOL,EAAOd,KAAKoB,QACvB,4BAAKN,EAAOd,KAAKqB,MACjB,4BAAKP,EAAOQ,MACZ,4BAAKR,EAAOS,WAGhB,4BACA,6BACA,6BACA,6BACA,6BACA,kC,iBC5BT,EACM,WACb,OAAOC,IAAMC,IAAI,2CCmFVC,MA9Ef,WAAgB,IAAD,EACqBC,mBAAS,CACzCC,KAAM,GACNC,aAAc,GACdC,OAAQ,KAJG,mBACNnB,EADM,KACKoB,EADL,KAkEb,OA3DAC,qBAAU,WACRC,IACGC,MAAK,SAAAC,GACJJ,EAAa,2BACRpB,GADO,IAEViB,KAAMO,EAASC,KAAKC,QACpBR,aAAcM,EAASC,KAAKC,gBAGjC,IAmDD,6BAAK,kBAAC,EAAD,MACL,kBAAClD,EAAA,EAAD,KACE,6BACCmD,QAAQC,IAAI5B,EAAUiB,MACvB,kBAAC,EAAD,CAAWzB,kBArDW,SAAAqC,GAAM,IAAD,EACLA,EAAEC,OAAlBzC,EADqB,EACrBA,KAAMC,EADe,EACfA,MAEd8B,EAAa,2BACRpB,GADO,kBAETX,EAAOC,KAGVqC,QAAQC,IAAItC,GACZqC,QAAQC,IAAI,CAACvC,IAEb,IAAM0C,EAAe/B,EAAUkB,aAAac,QAAO,SAAA7B,GACjD,OAAOA,EAAOd,KAAKoB,MAAMwB,cAAcC,SAAS5C,EAAM2C,kBAGxDb,EAAa,2BACRpB,GADO,IAEViB,KAAMc,MAoC2CZ,OAAQnB,EAAUmB,SAHrE,IAGgF,6BAC9E,kBAACgB,EAAD,CAAcnC,UAAWA,EAAUiB,KAAMlB,kBAjCnB,SAAA8B,GAExB,IAAMO,EAAaP,EAAEC,OAAOO,aAAa,QAGzC,GAFAV,QAAQC,IAAIQ,GAEO,UAAfA,EAAwB,CAC1B,IAAML,EAAe/B,EAAUiB,KAAKpB,MAAK,SAACyC,EAAGC,GAC3C,OAAOD,EAAEjD,KAAKoB,MAAM+B,cAAcD,EAAElD,KAAKoB,UAG3CW,EAAa,2BACRpB,GADO,IAEViB,KAAMc,UAGL,GAAmB,SAAfK,EAAuB,CAC9B,IAAML,EAAe/B,EAAUiB,KAAKpB,MAAK,SAACyC,EAAGC,GAC3C,OAAOD,EAAEjD,KAAKqB,KAAK8B,cAAcD,EAAElD,KAAKqB,SAG1CU,EAAa,2BACRpB,GADO,IAEViB,KAAMc,YC3DMU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.6c406003.chunk.js","sourcesContent":["import React from \"react\"\nimport { Navbar, Container } from \"react-bootstrap\"\n\nfunction TopBanner() {\n    return (\n        <Container>\n            <Navbar expand=\"lg\" variant=\"light\" bg=\"light\">\n                <h1>Employee Directory</h1>\n            </Navbar>\n        </Container>\n    )\n}\n\nexport default TopBanner","import React from \"react\"\nimport { FormControl, Container, InputGroup} from \"react-bootstrap\"\n\nfunction SearchCol(props) {\n    return (\n        <div>\n            <Container fluid>\n            <InputGroup>\n                <FormControl\n                placeholder=\"Employee name\"\n                aria-label=\"Employee name\"\n                aria-describedby=\"basic-addon2\"\n                name = \"search\"\n                value = {props.value}\n                onChange = {props.handleInputChange} \n                />\n            </InputGroup>\n            </Container>\n        </div>\n    )\n}\n\nexport default SearchCol","import React from \"react\"\nimport { Container, Table } from \"react-bootstrap\"\n\nfunction SearchCol(props) {\n    return (\n        <Container> \n           <Table striped bordered hover>\n                <thead>\n                    <tr>\n                    <th>Photo</th>\n                    <th sort=\"first\" onClick={props.handleSubmitClick}>First sort</th>\n                    <th sort=\"last\" onClick={props.handleSubmitClick}>Last Name</th>\n                    <th>Phone</th>\n                    <th>Email</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {props.employees.length > 0 ? props.employees.map((person, index) => {\n                        return (<tr key={index}>\n                            <td><img src={person.picture.medium}></img></td>\n                            <td><span>{person.name.first}</span></td>\n                            <td>{person.name.last}</td>\n                            <td>{person.cell}</td>\n                            <td>{person.email}</td>\n                            </tr>)\n                        }): (\n                        <tr> \n                        <td></td>\n                        <td></td>\n                        <td></td>\n                        <td></td>\n                        <td></td>\n                        </tr>\n                        )\n                    }\n                </tbody>\n            </Table>\n        </Container>\n    )\n}\n\nexport default SearchCol","import axios from \"axios\"\n\n\nexport default { \n    getRandomPeople: () => {\n        return axios.get(\"https://randomuser.me/api/?results=100\")\n    }\n }","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport TopBanner from './components/TopBanner/index';\nimport SearchCol from './components/SearchCol/index';\nimport EmployeeList from './components/EmployeeList/index';\nimport { Container } from \"react-bootstrap\"\nimport api from \"./utils/api\"\n\n\n\nfunction App() {\n  const [employees, setEmployees] = useState({\n    list: [],\n    originalList: [],\n    search: \"\"\n  })\n\n  useEffect(() => {\n    api.getRandomPeople()\n      .then(response => {\n        setEmployees({\n          ...employees,\n          list: response.data.results,\n          originalList: response.data.results\n        })\n      })\n  }, [])\n\n  const handleInputChange = e => {\n    const { name, value } = e.target\n\n    setEmployees({\n      ...employees,\n      [name]: value //still not sure of why we need to use [] \n    })\n\n    console.log(value)\n    console.log([name])\n    \n    const newEmployees = employees.originalList.filter(person => {\n      return person.name.first.toLowerCase().includes(value.toLowerCase())\n    })\n\n    setEmployees({\n      ...employees,\n      list: newEmployees\n    })\n  }\n\n  const handleSubmitClick = e => {\n\n    const sortOption = e.target.getAttribute(\"sort\")\n    console.log(sortOption)\n\n    if (sortOption === \"first\") {\n      const newEmployees = employees.list.sort((a, b) => {\n        return a.name.first.localeCompare(b.name.first)\n      })\n  \n      setEmployees({\n        ...employees,\n        list: newEmployees\n      })\n    }\n    else if (sortOption === \"last\") {\n      const newEmployees = employees.list.sort((a, b) => {\n        return a.name.last.localeCompare(b.name.last)\n      })\n  \n      setEmployees({\n        ...employees,\n        list: newEmployees\n      })\n    }\n  }\n\n  return (\n    <div><TopBanner />\n    <Container>\n      <br />\n      {console.log(employees.list)}\n      <SearchCol handleInputChange={handleInputChange} search={employees.search} /> <br />\n      <EmployeeList employees={employees.list} handleSubmitClick={handleSubmitClick} />\n    </Container>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}